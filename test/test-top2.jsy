const assert = require('assert')

export default function (tap, {create_fnvxor32, select_top_n}) ::
  const selector = select_top_n(2)
  const {result} = selector
  selector.result = sel => result(sel).join(' ')

  const fnvxor32 = create_fnvxor32 @: selector

  function expectMapping(a0, a1) ::
    const lst = Array.isArray(a0) ? a0 : a1
    const mapping = Array.isArray(a0) ? a1 : a0

    const actual = {}
    for const key of Object.keys(mapping) ::
      actual[key] = fnvxor32(key, lst)

    try ::
      assert.deepEqual @ actual, mapping
    catch err ::
      console.log()
      console.log @ lst
      console.log @ JSON.stringify(actual, null, 2)
      console.log()
      throw err


  tap.test @ `top2 :: empty`, @=> ::
    expectMapping @ [], @{} 'key': ''
    
  tap.test @ `top2 :: one`, @=> ::
    const lst = @[] 'one'
    expectMapping @ lst, @{} 'key': 'one'

  tap.test @ `top2 :: one two`, @=> ::
    const ans = {
      "aaaaaa": "two one",
      "bbbbbb": "one two",
      "cccccc": "two one",
      "dddddd": "one two",
      "eeeeee": "one two",
      "ffffff": "two one",
      "gggggg": "one two",
      "hhhhhh": "one two",
      "iiiiii": "two one",
    }

    expectMapping @ ans, @[] 'one', 'two'
    expectMapping @ ans, @[] 'two', 'one'
    expectMapping @ ans, @[] 'two', 'one', 'two'
    expectMapping @ ans, @[] 'two', 'one', 'one', 'one', 'two'

  tap.test @ `top2 :: one two three`, @=> ::
    const ans = {
      "aaaaaa": "two one",
      "bbbbbb": "one two",
      "cccccc": "three two",
      "dddddd": "one two",
      "eeeeee": "three one",
      "ffffff": "two one",
      "gggggg": "one two",
      "hhhhhh": "one three",
      "iiiiii": "three two",
    }

    expectMapping @ ans, @[] 'one', 'two', 'three'
    expectMapping @ ans, @[] 'two', 'one', 'three'
    expectMapping @ ans, @[] 'three', 'two', 'one', 'two'
    expectMapping @ ans, @[] 'two', 'three', 'one', 'one', 'one', 'two'

  tap.test @ `top2 :: one two three four`, @=> ::
    const ans = {
      "aaaaaa": "two one",
      "bbbbbb": "one two",
      "cccccc": "four three",
      "dddddd": "one two",
      "eeeeee": "four three",
      "ffffff": "four two",
      "gggggg": "one two",
      "hhhhhh": "one four",
      "iiiiii": "three four",
    }

    expectMapping @ ans, @[] 'one', 'two', 'three', 'four'
    expectMapping @ ans, @[] 'two', 'four', 'three', 'one'

