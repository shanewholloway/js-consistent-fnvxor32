const assert = require('assert')

export default function (tap, {create_weighted_fnvxor32}) ::
  const weighted_fnvxor32 = create_weighted_fnvxor32({})
  const weights = @{}
    'one': 1
    'two': 2
    'three': 3
    'four': 4

  function expectMapping(a0, a1) ::
    const lst = Array.isArray(a0) ? a0 : a1
    const mapping = Array.isArray(a0) ? a1 : a0

    const actual = {}
    for const key of Object.keys(mapping) ::
      actual[key] = weighted_fnvxor32 @ key,
        lst.map @ e => @# e, weights[e]

    try ::
      assert.deepEqual @ actual, mapping
    catch err ::
      console.log()
      console.log @ lst
      console.log @ JSON.stringify(actual, null, 2)
      console.log()
      throw err


  tap.test @ `select all :: empty`, @=> ::
    expectMapping @ [], @{} 'key': null
    
  tap.test @ `select all :: one`, @=> ::
    const lst = @[] 'one'
    expectMapping @ lst, @{} 'key': 'one'

  tap.test @ `select all :: one two`, @=> ::
    const ans = @{}
      "aaaaaa": "two",
      "bbbbbb": "two",
      "cccccc": "two",
      "dddddd": "one",
      "eeeeee": "one",
      "ffffff": "two",
      "gggggg": "one",
      "hhhhhh": "two",
      "iiiiii": "two"

    expectMapping @ ans, @[] 'one', 'two'
    expectMapping @ ans, @[] 'two', 'one'

  tap.test @ `select all :: one two three`, @=> ::
    const ans = @{}
      "aaaaaa": "two",
      "bbbbbb": "three",
      "cccccc": "three",
      "dddddd": "one",
      "eeeeee": "three",
      "ffffff": "three",
      "gggggg": "one",
      "hhhhhh": "two",
      "iiiiii": "two"

    expectMapping @ ans, @[] 'one', 'two', 'three'
    expectMapping @ ans, @[] 'two', 'one', 'three'

  tap.test @ `select all :: one two three four`, @=> ::
    const ans = @{}
      "aaaaaa": "two",
      "bbbbbb": "three",
      "cccccc": "four",
      "dddddd": "one",
      "eeeeee": "four",
      "ffffff": "four",
      "gggggg": "one",
      "hhhhhh": "four",
      "iiiiii": "four",
      "jjjjjj": "four",
      "kkkkkk": "four",
      "llllll": "four",
      "mmmmmm": "one",
      "nnnnnn": "one",
      "oooooo": "two",
      "pppppp": "two",
      "qqqqqq": "three",
      "rrrrrr": "three"

    expectMapping @ ans, @[] 'one', 'two', 'three', 'four'
    expectMapping @ ans, @[] 'two', 'four', 'three', 'one'

