export default select_top_n
export function select_top_n(n) ::
  if 1 >= n || 10 < n ::
    throw new TypeError @ `select_top_n not suitable for ${n}`
  n = n|0

  select_top_n.result = sel => (sel || [])
    .sort @ (a, b) => (a[0] - b[0]) || (a[1] <= b[1] ? -1 : 1)
    .map @ e => e[1]
  return select_top_n

  function select_top_n(h_tip, tip, h_sel, sel) ::
    if null === sel :: sel = []

    let idx = -1, h_max = -Infinity
    for let i = 0; i<sel.length; i++ ::
      const [h, v] = sel[i]
      if tip === v ::
        if h_tip < h ::
          // replace own current best
          idx = i; h_max = null
          break

        else return null // same value but worse h_tip

      if h_tip < h && h >= h_max ::
        // outperform existing; look for the max of mins
        h_max = h
        idx = i

    if sel.length >= n ::
      if -1 === idx ::
        return null // full
      // replacing existing
    else if h_max === null ::
      // not full, but replacing own entry
    else ::
      // not full, append slot
      idx = sel.length

    sel[idx] = @[] h_tip, tip
    return sel

